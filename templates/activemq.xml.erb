<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">
  <!-- Allows us to use system properties as variables in this configuration file -->
  <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="locations">
      <value>file:${activemq.conf}/credentials.properties</value>
    </property>
  </bean>
  <!--
       Enable web consoles, REST and Ajax APIs and demos
       See ${ACTIVEMQ_HOME}/conf/jetty.xml for more details.
  -->
  <import resource="jetty.xml" />
  <!--
	The <broker> element is used to configure the ActiveMQ broker.
    -->
  <broker xmlns="http://activemq.apache.org/schema/core" useJmx="true" brokerName="amq-<%= @az %>-<%= @env %>" dataDirectory="${activemq.data}" networkConnectorStartAsync="true" schedulePeriodForDestinationPurge="60000">
    <!--
	  For better performances use VM cursor and small memory limit.
	  For more information, see:

	  http://activemq.apache.org/message-cursors.html

	  Also, if your producer is "hanging", it's probably due to producer
	  flow control.

	  For more information, see:
	  http://activemq.apache.org/producer-flow-control.html
    -->
    <destinationPolicy>
      <policyMap>
	<policyEntries>
	  <policyEntry topic=">" producerFlowControl="false" memoryLimit="1mb">
	    <pendingSubscriberPolicy>
	      <vmCursor />
	    </pendingSubscriberPolicy>
	    <!-- The constantPendingMessageLimitStrategy is used to prevent
		 slow topic consumers to block producers and affect other consumers
		 by limiting the number of messages that are retained
		 For more information, see:

		 http://activemq.apache.org/slow-consumer-handling.html
	    -->
	    <pendingMessageLimitStrategy>
	      <constantPendingMessageLimitStrategy limit="1000" />
	    </pendingMessageLimitStrategy>
	  </policyEntry>
	  <policyEntry queue=">" producerFlowControl="false" memoryLimit="1mb" gcInactiveDestinations="true" inactiveTimoutBeforeGC="300000">
	    <!--
		    Use VM cursor for better latency
		    For more information, see:

		    http://activemq.apache.org/message-cursors.html

	    -->
	    <pendingQueuePolicy>
	      <vmQueueCursor />
	    </pendingQueuePolicy>
	  </policyEntry>
	</policyEntries>
      </policyMap>
    </destinationPolicy>
    <!--
	  The managementContext is used to configure how ActiveMQ is exposed in
	  JMX. By default, ActiveMQ uses the MBean server that is started by
	  the JVM. For more information, see:

	  http://activemq.apache.org/jmx.html
	-->
    <managementContext>
      <managementContext createConnector="true" connectorHost="localhost" connectorPort="1099" rmiServerPort="1098" />
    </managementContext>
    <!--
	  Configure message persistence for the broker. The default persistence
	  mechanism is the KahaDB store (identified by the kahaDB tag).
	  For more information, see:

	  http://activemq.apache.org/persistence.html
	-->
    <persistenceAdapter>
      <kahaDB directory="${activemq.data}/kahadb" />
    </persistenceAdapter>
    <plugins>
      <!--
	    Enable the statisticsBrokerPlugin to allow ActiveMQ to collect
	    statistics.
	  -->
      <statisticsBrokerPlugin />
      <!--
	    Here we define a default set of users
	  -->
      <simpleAuthenticationPlugin>
	<users>
	  <authenticationUser username='<%= @broker_username %>' password='<%= @broker_password %>' groups='brokers,everyone' />
	  <authenticationUser username='<%= @client_username %>' password='<%= @client_password %>' groups='servers,clients,everyone' />
	  <authenticationUser username='<%= @server_username %>' password='<%= @server_password %>' groups='servers,everyone' />
	</users>
      </simpleAuthenticationPlugin>
      <authorizationPlugin>
	<map>
	  <authorizationMap>
	    <authorizationEntries>
	      <authorizationEntry queue=">" write="brokers" read="brokers" admin="brokers" />
	      <authorizationEntry topic=">" write="brokers" read="brokers" admin="brokers" />
	      <authorizationEntry queue="<%= @env %>.>" write="clients" read="clients" admin="clients" />
	      <authorizationEntry topic="<%= @env %>.>" write="clients" read="clients" admin="clients" />
	      <authorizationEntry queue="<%= @env %>.nodes" read="servers" admin="servers" />
	      <authorizationEntry queue="<%= @env %>.reply.>" write="servers" admin="servers" />
	      <authorizationEntry topic="<%= @env %>.*.agent" read="servers" admin="servers" />
	      <authorizationEntry topic="<%= @env %>.registration.agent" write="servers" read="servers" admin="servers" />
	      <authorizationEntry queue="<%= @whatami_region %>.>" write="clients" read="clients" admin="clients" />
	      <authorizationEntry topic="<%= @whatami_region %>.>" write="clients" read="clients" admin="clients" />
	      <authorizationEntry queue="<%= @whatami_region %>.nodes" read="servers" admin="servers" />
	      <authorizationEntry queue="<%= @whatami_region %>.reply.>" write="servers" admin="servers" />
	      <authorizationEntry topic="<%= @whatami_region %>.*.agent" read="servers" admin="servers" />
	      <authorizationEntry topic="<%= @whatami_region %>.registration.agent" write="servers" read="servers" admin="servers" />
	      <authorizationEntry topic="ActiveMQ.Advisory.>" read="everyone" write="everyone" admin="everyone" />
<% @env_azs.sort.each do |env_az| -%>
	      <authorizationEntry queue="<%= env_az %>.>" write="clients" read="clients" admin="clients" />
	      <authorizationEntry topic="<%= env_az %>.>" write="clients" read="clients" admin="clients" />
	      <authorizationEntry queue="<%= env_az %>.nodes" read="servers" admin="servers" />
	      <authorizationEntry queue="<%= env_az %>.reply.>" write="servers" admin="servers" />
	      <authorizationEntry topic="<%= env_az %>.*.agent" read="servers" admin="servers" />
	      <authorizationEntry topic="<%= env_az %>.registration.agent" write="servers" read="servers" admin="servers" />
<% end -%>
	    </authorizationEntries>
	  </authorizationMap>
	</map>
      </authorizationPlugin>
    </plugins>
    <!--
	  The systemUsage controls the maximum amount of space the broker will
	  use before disabling caching and/or slowing down producers. For more information, see:
	  http://activemq.apache.org/producer-flow-control.html
	-->
    <systemUsage>
      <systemUsage>
	<memoryUsage>
	  <memoryUsage percentOfJvmHeap="70" />
	</memoryUsage>
	<storeUsage>
	  <storeUsage limit="1 gb" />
	</storeUsage>
	<tempUsage>
	  <tempUsage limit="100 mb" />
	</tempUsage>
      </systemUsage>
    </systemUsage>
    <!--
	  The transport connectors expose ActiveMQ over a given protocol to
	  clients and other brokers. For more information, see:

	  http://activemq.apache.org/configuring-transports.html
	-->
    <transportConnectors>
      <!-- DOS protection, limit concurrent connections to 1000 and frame size to 100MB -->
      <transportConnector name="openwire+ssl" uri="ssl://0.0.0.0:61617?needClientAuth=true&amp;maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600" />
      <transportConnector name="stomp+nio+ssl" uri="stomp+nio+ssl://0.0.0.0:61614?needClientAuth=true&amp;maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600" />
      <!--
        Configure a non-ssl connector that the ELB health check can hit.
        Connections will only be allowed from the ELB, and no listener will be set up on this port.
      -->
	    <transportConnector name="stomp+nio" uri="stomp+nio://0.0.0.0:61613?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
      <!--
	    <transportConnector name="openwire" uri="tcp://0.0.0.0:61616?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
      -->
    </transportConnectors>
    <networkConnectors>
<% @env_azs.sort.each do |env_az| -%>
<% if env_az != @az -%>
      <networkConnector
        name='<%= @az %>-<%= env_az %>-topics'
        uri='static:(ssl://amq-<%= env_az %>-<%= @env %>.<%= @domain %>:61617)'
        userName='<%= @broker_username %>'
        password='<%= @broker_password %>'
        duplex="true"
        decreaseNetworkConsumerPriority="true"
        networkTTL="2"
        dynamicOnly="true">
        <excludedDestinations>
          <queue physicalName=">" />
        </excludedDestinations>
      </networkConnector>
      <networkConnector
        name='<%= @az %>-<%= env_az %>-queues'
        uri='static:(ssl://amq-<%= env_az %>-<%= @env %>.<%= @domain %>:61617)'
        userName='<%= @broker_username %>'
        password='<%= @broker_password %>'
        duplex="true"
        decreaseNetworkConsumerPriority="true"
        networkTTL="2"
        dynamicOnly="true">
        <excludedDestinations>
          <topic physicalName=">" />
        </excludedDestinations>
      </networkConnector>
<% end -%>
<% end -%>
    </networkConnectors>
    <!-- destroy the spring context on shutdown to stop jetty -->
    <!-- DEfine SSL contexts. -->
    <sslContext>
      <sslContext keyStore="<%= @keystore_path %>" keyStorePassword="<%= @keystore_pass %>" trustStore="<%= @truststore_path %>" trustStorePassword="<%= @truststore_pass %>"></sslContext>
    </sslContext>
    <shutdownHooks>
      <bean xmlns="http://www.springframework.org/schema/beans" class="org.apache.activemq.hooks.SpringContextHook" />
    </shutdownHooks>
  </broker>
  <!--
      Enable web consoles, REST and Ajax APIs and demos
	The web consoles requires by default login, you can disable this in the jetty.xml file

      Take a look at ${ACTIVEMQ_HOME}/conf/jetty.xml for more details
    -->
</beans>